{"ast":null,"code":"import { CallbackManager, parseCallbackConfigArg } from \"./callbacks/manager.js\";\nimport { Runnable } from \"./runnables/base.js\";\nimport { ensureConfig } from \"./runnables/config.js\";\n/**\n * Abstract base class for a Document retrieval system. A retrieval system\n * is defined as something that can take string queries and return the\n * most 'relevant' Documents from some source.\n */\nexport class BaseRetriever extends Runnable {\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tags\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"metadata\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"verbose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.callbacks = fields?.callbacks;\n    this.tags = fields?.tags ?? [];\n    this.metadata = fields?.metadata ?? {};\n    this.verbose = fields?.verbose ?? false;\n  }\n  /**\n   * TODO: This should be an abstract method, but we'd like to avoid breaking\n   * changes to people currently using subclassed custom retrievers.\n   * Change it on next major release.\n   */\n  _getRelevantDocuments(_query, _callbacks) {\n    throw new Error(\"Not implemented!\");\n  }\n  async invoke(input, options) {\n    return this.getRelevantDocuments(input, ensureConfig(options));\n  }\n  /**\n   * Main method used to retrieve relevant documents. It takes a query\n   * string and an optional configuration object, and returns a promise that\n   * resolves to an array of `Document` objects. This method handles the\n   * retrieval process, including starting and ending callbacks, and error\n   * handling.\n   * @param query The query string to retrieve relevant documents for.\n   * @param config Optional configuration object for the retrieval process.\n   * @returns A promise that resolves to an array of `Document` objects.\n   */\n  async getRelevantDocuments(query, config) {\n    const parsedConfig = ensureConfig(parseCallbackConfigArg(config));\n    const callbackManager_ = await CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags, this.tags, parsedConfig.metadata, this.metadata, {\n      verbose: this.verbose\n    });\n    const runManager = await callbackManager_?.handleRetrieverStart(this.toJSON(), query, undefined, undefined, undefined, undefined, parsedConfig.runName);\n    try {\n      const results = await this._getRelevantDocuments(query, runManager);\n      await runManager?.handleRetrieverEnd(results);\n      return results;\n    } catch (error) {\n      await runManager?.handleRetrieverError(error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["CallbackManager","parseCallbackConfigArg","Runnable","ensureConfig","BaseRetriever","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","callbacks","tags","metadata","verbose","_getRelevantDocuments","_query","_callbacks","Error","invoke","input","options","getRelevantDocuments","query","config","parsedConfig","callbackManager_","configure","runManager","handleRetrieverStart","toJSON","undefined","runName","results","handleRetrieverEnd","error","handleRetrieverError"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/@langchain/core/dist/retrievers.js"],"sourcesContent":["import { CallbackManager, parseCallbackConfigArg, } from \"./callbacks/manager.js\";\nimport { Runnable } from \"./runnables/base.js\";\nimport { ensureConfig } from \"./runnables/config.js\";\n/**\n * Abstract base class for a Document retrieval system. A retrieval system\n * is defined as something that can take string queries and return the\n * most 'relevant' Documents from some source.\n */\nexport class BaseRetriever extends Runnable {\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callbacks = fields?.callbacks;\n        this.tags = fields?.tags ?? [];\n        this.metadata = fields?.metadata ?? {};\n        this.verbose = fields?.verbose ?? false;\n    }\n    /**\n     * TODO: This should be an abstract method, but we'd like to avoid breaking\n     * changes to people currently using subclassed custom retrievers.\n     * Change it on next major release.\n     */\n    _getRelevantDocuments(_query, _callbacks) {\n        throw new Error(\"Not implemented!\");\n    }\n    async invoke(input, options) {\n        return this.getRelevantDocuments(input, ensureConfig(options));\n    }\n    /**\n     * Main method used to retrieve relevant documents. It takes a query\n     * string and an optional configuration object, and returns a promise that\n     * resolves to an array of `Document` objects. This method handles the\n     * retrieval process, including starting and ending callbacks, and error\n     * handling.\n     * @param query The query string to retrieve relevant documents for.\n     * @param config Optional configuration object for the retrieval process.\n     * @returns A promise that resolves to an array of `Document` objects.\n     */\n    async getRelevantDocuments(query, config) {\n        const parsedConfig = ensureConfig(parseCallbackConfigArg(config));\n        const callbackManager_ = await CallbackManager.configure(parsedConfig.callbacks, this.callbacks, parsedConfig.tags, this.tags, parsedConfig.metadata, this.metadata, { verbose: this.verbose });\n        const runManager = await callbackManager_?.handleRetrieverStart(this.toJSON(), query, undefined, undefined, undefined, undefined, parsedConfig.runName);\n        try {\n            const results = await this._getRelevantDocuments(query, runManager);\n            await runManager?.handleRetrieverEnd(results);\n            return results;\n        }\n        catch (error) {\n            await runManager?.handleRetrieverError(error);\n            throw error;\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}