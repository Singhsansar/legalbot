{"ast":null,"code":"import { Serializable } from \"./load/serializable.js\";\nimport { HumanMessage, AIMessage } from \"./messages/index.js\";\n/**\n * Base class for all chat message histories. All chat message histories\n * should extend this class.\n */\nexport class BaseChatMessageHistory extends Serializable {}\n/**\n * Base class for all list chat message histories. All list chat message\n * histories should extend this class.\n */\nexport class BaseListChatMessageHistory extends Serializable {\n  /**\n   * This is a convenience method for adding a human message string to the store.\n   * Please note that this is a convenience method. Code should favor the\n   * bulk addMessages interface instead to save on round-trips to the underlying\n   * persistence layer.\n   * This method may be deprecated in a future release.\n   */\n  addUserMessage(message) {\n    return this.addMessage(new HumanMessage(message));\n  }\n  /** @deprecated Use addAIMessage instead */\n  addAIChatMessage(message) {\n    return this.addMessage(new AIMessage(message));\n  }\n  /**\n   * This is a convenience method for adding an AI message string to the store.\n   * Please note that this is a convenience method. Code should favor the bulk\n   * addMessages interface instead to save on round-trips to the underlying\n   * persistence layer.\n   * This method may be deprecated in a future release.\n   */\n  addAIMessage(message) {\n    return this.addMessage(new AIMessage(message));\n  }\n  /**\n   * Add a list of messages.\n   *\n   * Implementations should override this method to handle bulk addition of messages\n   * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n   *\n   * @param messages - A list of BaseMessage objects to store.\n   */\n  async addMessages(messages) {\n    for (const message of messages) {\n      await this.addMessage(message);\n    }\n  }\n  /**\n   * Remove all messages from the store.\n   */\n  clear() {\n    throw new Error(\"Not implemented.\");\n  }\n}","map":{"version":3,"names":["Serializable","HumanMessage","AIMessage","BaseChatMessageHistory","BaseListChatMessageHistory","addUserMessage","message","addMessage","addAIChatMessage","addAIMessage","addMessages","messages","clear","Error"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/@langchain/core/dist/chat_history.js"],"sourcesContent":["import { Serializable } from \"./load/serializable.js\";\nimport { HumanMessage, AIMessage } from \"./messages/index.js\";\n/**\n * Base class for all chat message histories. All chat message histories\n * should extend this class.\n */\nexport class BaseChatMessageHistory extends Serializable {\n}\n/**\n * Base class for all list chat message histories. All list chat message\n * histories should extend this class.\n */\nexport class BaseListChatMessageHistory extends Serializable {\n    /**\n     * This is a convenience method for adding a human message string to the store.\n     * Please note that this is a convenience method. Code should favor the\n     * bulk addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */\n    addUserMessage(message) {\n        return this.addMessage(new HumanMessage(message));\n    }\n    /** @deprecated Use addAIMessage instead */\n    addAIChatMessage(message) {\n        return this.addMessage(new AIMessage(message));\n    }\n    /**\n     * This is a convenience method for adding an AI message string to the store.\n     * Please note that this is a convenience method. Code should favor the bulk\n     * addMessages interface instead to save on round-trips to the underlying\n     * persistence layer.\n     * This method may be deprecated in a future release.\n     */\n    addAIMessage(message) {\n        return this.addMessage(new AIMessage(message));\n    }\n    /**\n     * Add a list of messages.\n     *\n     * Implementations should override this method to handle bulk addition of messages\n     * in an efficient manner to avoid unnecessary round-trips to the underlying store.\n     *\n     * @param messages - A list of BaseMessage objects to store.\n     */\n    async addMessages(messages) {\n        for (const message of messages) {\n            await this.addMessage(message);\n        }\n    }\n    /**\n     * Remove all messages from the store.\n     */\n    clear() {\n        throw new Error(\"Not implemented.\");\n    }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wBAAwB;AACrD,SAASC,YAAY,EAAEC,SAAS,QAAQ,qBAAqB;AAC7D;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,SAASH,YAAY,CAAC;AAEzD;AACA;AACA;AACA;AACA,OAAO,MAAMI,0BAA0B,SAASJ,YAAY,CAAC;EACzD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIK,cAAcA,CAACC,OAAO,EAAE;IACpB,OAAO,IAAI,CAACC,UAAU,CAAC,IAAIN,YAAY,CAACK,OAAO,CAAC,CAAC;EACrD;EACA;EACAE,gBAAgBA,CAACF,OAAO,EAAE;IACtB,OAAO,IAAI,CAACC,UAAU,CAAC,IAAIL,SAAS,CAACI,OAAO,CAAC,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,YAAYA,CAACH,OAAO,EAAE;IAClB,OAAO,IAAI,CAACC,UAAU,CAAC,IAAIL,SAAS,CAACI,OAAO,CAAC,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMI,WAAWA,CAACC,QAAQ,EAAE;IACxB,KAAK,MAAML,OAAO,IAAIK,QAAQ,EAAE;MAC5B,MAAM,IAAI,CAACJ,UAAU,CAACD,OAAO,CAAC;IAClC;EACJ;EACA;AACJ;AACA;EACIM,KAAKA,CAAA,EAAG;IACJ,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;EACvC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}