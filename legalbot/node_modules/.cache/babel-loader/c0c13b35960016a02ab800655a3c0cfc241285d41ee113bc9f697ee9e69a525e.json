{"ast":null,"code":"module.exports = function (haystack, needle, comparator, low, high) {\n  var mid, cmp;\n  if (low === undefined) low = 0;else {\n    low = low | 0;\n    if (low < 0 || low >= haystack.length) throw new RangeError(\"invalid lower bound\");\n  }\n  if (high === undefined) high = haystack.length - 1;else {\n    high = high | 0;\n    if (high < low || high >= haystack.length) throw new RangeError(\"invalid upper bound\");\n  }\n  while (low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + (high - low >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if (cmp < 0.0) low = mid + 1;\n\n    // Too high.\n    else if (cmp > 0.0) high = mid - 1;\n\n    // Key found.\n    else return mid;\n  }\n\n  // Key not found.\n  return ~low;\n};","map":{"version":3,"names":["module","exports","haystack","needle","comparator","low","high","mid","cmp","undefined","length","RangeError"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/binary-search/index.js"],"sourcesContent":["module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    // The naive `low + high >>> 1` could fail for array lengths > 2**31\n    // because `>>>` converts its operands to int32. `low + (high - low >>> 1)`\n    // works for array lengths <= 2**32-1 which is also Javascript's max array\n    // length.\n    mid = low + ((high - low) >>> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    // Too low.\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    // Too high.\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    // Key found.\n    else\n      return mid;\n  }\n\n  // Key not found.\n  return ~low;\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG,UAASC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACjE,IAAIC,GAAG,EAAEC,GAAG;EAEZ,IAAGH,GAAG,KAAKI,SAAS,EAClBJ,GAAG,GAAG,CAAC,CAAC,KAEL;IACHA,GAAG,GAAGA,GAAG,GAAC,CAAC;IACX,IAAGA,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAIH,QAAQ,CAACQ,MAAM,EAClC,MAAM,IAAIC,UAAU,CAAC,qBAAqB,CAAC;EAC/C;EAEA,IAAGL,IAAI,KAAKG,SAAS,EACnBH,IAAI,GAAGJ,QAAQ,CAACQ,MAAM,GAAG,CAAC,CAAC,KAExB;IACHJ,IAAI,GAAGA,IAAI,GAAC,CAAC;IACb,IAAGA,IAAI,GAAGD,GAAG,IAAIC,IAAI,IAAIJ,QAAQ,CAACQ,MAAM,EACtC,MAAM,IAAIC,UAAU,CAAC,qBAAqB,CAAC;EAC/C;EAEA,OAAMN,GAAG,IAAIC,IAAI,EAAE;IACjB;IACA;IACA;IACA;IACAC,GAAG,GAAGF,GAAG,IAAKC,IAAI,GAAGD,GAAG,KAAM,CAAC,CAAC;IAChCG,GAAG,GAAG,CAACJ,UAAU,CAACF,QAAQ,CAACK,GAAG,CAAC,EAAEJ,MAAM,EAAEI,GAAG,EAAEL,QAAQ,CAAC;;IAEvD;IACA,IAAGM,GAAG,GAAG,GAAG,EACVH,GAAG,GAAIE,GAAG,GAAG,CAAC;;IAEhB;IAAA,KACK,IAAGC,GAAG,GAAG,GAAG,EACfF,IAAI,GAAGC,GAAG,GAAG,CAAC;;IAEhB;IAAA,KAEE,OAAOA,GAAG;EACd;;EAEA;EACA,OAAO,CAACF,GAAG;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}