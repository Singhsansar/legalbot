{"ast":null,"code":"import { PineconeStore } from \"@langchain/pinecone\";\nimport { TaskType } from \"@google/generative-ai\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ConversationalRetrievalQAChain } from \"langchain/chains\";\nimport { Pinecone } from '@pinecone-database/pinecone';\nimport { ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\nimport { GoogleGenerativeAIEmbeddings } from \"@langchain/google-genai\";\n\n// const pinecone = new Pinecone({\n//     apiKey: process.env.PINECONE_API_KEY,\n//     environment: process.env.PINECONE_ENVIRONMENT,\n// });\nconst pinecone = new Pinecone({\n  apiKey: \"5b7b8370-21cc-4bd3-ad37-fabf3d349fbd\"\n  // environment: \"gcp-starter\",\n});\nconst pineconeIndex = pinecone.Index(\"legalbot\");\nconst embeddings = new GoogleGenerativeAIEmbeddings({\n  modelName: \"embedding-001\",\n  // 768 dimensions\n  taskType: TaskType.RETRIEVAL_DOCUMENT,\n  title: \"Document title\",\n  apiKey: \"AIzaSyCJa5hOEfGe3Ct2NV6WQ5hWsEARa3LZQuk\"\n});\nconst model = new ChatGoogleGenerativeAI({\n  apiKey: \"AIzaSyCJa5hOEfGe3Ct2NV6WQ5hWsEARa3LZQuk\",\n  modelName: \"gemini-pro\",\n  maxOutputTokens: 2048\n});\nconst vectorStore = await PineconeStore.fromExistingIndex(embeddings, {\n  pineconeIndex\n});\nconst prompt_template = `\n    As a legal professional, provide an informed response to the user's query. Ensure your answer adheres to legal standards and includes relevant rules and regulations.\n    you can also genenrate responses by yourself don't fully depend on the context provided\n\n    Context: {context}\n    Question: {question}\n\n    Present your answer in accordance with legal principles and refrain from conjecture or speculation.\n\n    Helpful answer:\n`;\nconst PROMPT = new PromptTemplate({\n  inputVariables: [\"context\", \"question\"],\n  template: prompt_template\n});\nconst chain_type_kwargs = {\n  \"prompt\": PROMPT\n};\nconst chain = ConversationalRetrievalQAChain.fromLLM(model, vectorStore.asRetriever(), {\n  maxOutputTokens: 2048,\n  returnSourceDocuments: true,\n  questionGeneratorChainOptions: chain_type_kwargs\n});\nexport async function searchSimilarQuestions(question) {\n  try {\n    const res = await chain.invoke({\n      question,\n      chat_history: \"\"\n    });\n    return res.text;\n  } catch (error) {\n    console.error(\"Error occurred during similarity search:\", error);\n    return null;\n  }\n}","map":{"version":3,"names":["PineconeStore","TaskType","PromptTemplate","ConversationalRetrievalQAChain","Pinecone","ChatGoogleGenerativeAI","GoogleGenerativeAIEmbeddings","pinecone","apiKey","pineconeIndex","Index","embeddings","modelName","taskType","RETRIEVAL_DOCUMENT","title","model","maxOutputTokens","vectorStore","fromExistingIndex","prompt_template","PROMPT","inputVariables","template","chain_type_kwargs","chain","fromLLM","asRetriever","returnSourceDocuments","questionGeneratorChainOptions","searchSimilarQuestions","question","res","invoke","chat_history","text","error","console"],"sources":["/home/nikhil/legalbot/legalbot/src/lang.mjs"],"sourcesContent":["import { PineconeStore } from \"@langchain/pinecone\";\nimport { TaskType } from \"@google/generative-ai\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ConversationalRetrievalQAChain } from \"langchain/chains\";\nimport { Pinecone } from '@pinecone-database/pinecone';\nimport { ChatGoogleGenerativeAI } from \"@langchain/google-genai\";\nimport { GoogleGenerativeAIEmbeddings } from \"@langchain/google-genai\";\n\n// const pinecone = new Pinecone({\n//     apiKey: process.env.PINECONE_API_KEY,\n//     environment: process.env.PINECONE_ENVIRONMENT,\n// });\nconst pinecone = new Pinecone({\n    apiKey: \"5b7b8370-21cc-4bd3-ad37-fabf3d349fbd\",\n    // environment: \"gcp-starter\",\n});\nconst pineconeIndex = pinecone.Index(\"legalbot\");\n\nconst embeddings = new GoogleGenerativeAIEmbeddings({\n    modelName: \"embedding-001\", // 768 dimensions\n    taskType: TaskType.RETRIEVAL_DOCUMENT,\n    title: \"Document title\",\n    apiKey: \"AIzaSyCJa5hOEfGe3Ct2NV6WQ5hWsEARa3LZQuk\"\n});\n\nconst model = new ChatGoogleGenerativeAI({\n    apiKey: \"AIzaSyCJa5hOEfGe3Ct2NV6WQ5hWsEARa3LZQuk\",\n    modelName: \"gemini-pro\",\n    maxOutputTokens: 2048,\n});\n\nconst vectorStore = await PineconeStore.fromExistingIndex(\n    embeddings,\n    { pineconeIndex }\n);\n\nconst prompt_template = `\n    As a legal professional, provide an informed response to the user's query. Ensure your answer adheres to legal standards and includes relevant rules and regulations.\n    you can also genenrate responses by yourself don't fully depend on the context provided\n\n    Context: {context}\n    Question: {question}\n\n    Present your answer in accordance with legal principles and refrain from conjecture or speculation.\n\n    Helpful answer:\n`;\n\nconst PROMPT = new PromptTemplate({\n    inputVariables: [\"context\", \"question\"],\n    template: prompt_template,\n});\n\nconst chain_type_kwargs = { \"prompt\": PROMPT };\n\nconst chain = ConversationalRetrievalQAChain.fromLLM(\n    model,\n    vectorStore.asRetriever(),\n    {\n        maxOutputTokens: 2048,\n        returnSourceDocuments: true,\n        questionGeneratorChainOptions: chain_type_kwargs,\n    }\n);\n\nexport async function searchSimilarQuestions(question) {\n    try {\n        const res = await chain.invoke({ question, chat_history: \"\" });\n        return res.text;\n    } catch (error) {\n        console.error(\"Error occurred during similarity search:\", error);\n        return null;\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,8BAA8B,QAAQ,kBAAkB;AACjE,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,sBAAsB,QAAQ,yBAAyB;AAChE,SAASC,4BAA4B,QAAQ,yBAAyB;;AAEtE;AACA;AACA;AACA;AACA,MAAMC,QAAQ,GAAG,IAAIH,QAAQ,CAAC;EAC1BI,MAAM,EAAE;EACR;AACJ,CAAC,CAAC;AACF,MAAMC,aAAa,GAAGF,QAAQ,CAACG,KAAK,CAAC,UAAU,CAAC;AAEhD,MAAMC,UAAU,GAAG,IAAIL,4BAA4B,CAAC;EAChDM,SAAS,EAAE,eAAe;EAAE;EAC5BC,QAAQ,EAAEZ,QAAQ,CAACa,kBAAkB;EACrCC,KAAK,EAAE,gBAAgB;EACvBP,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,MAAMQ,KAAK,GAAG,IAAIX,sBAAsB,CAAC;EACrCG,MAAM,EAAE,yCAAyC;EACjDI,SAAS,EAAE,YAAY;EACvBK,eAAe,EAAE;AACrB,CAAC,CAAC;AAEF,MAAMC,WAAW,GAAG,MAAMlB,aAAa,CAACmB,iBAAiB,CACrDR,UAAU,EACV;EAAEF;AAAc,CACpB,CAAC;AAED,MAAMW,eAAe,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,MAAM,GAAG,IAAInB,cAAc,CAAC;EAC9BoB,cAAc,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;EACvCC,QAAQ,EAAEH;AACd,CAAC,CAAC;AAEF,MAAMI,iBAAiB,GAAG;EAAE,QAAQ,EAAEH;AAAO,CAAC;AAE9C,MAAMI,KAAK,GAAGtB,8BAA8B,CAACuB,OAAO,CAChDV,KAAK,EACLE,WAAW,CAACS,WAAW,CAAC,CAAC,EACzB;EACIV,eAAe,EAAE,IAAI;EACrBW,qBAAqB,EAAE,IAAI;EAC3BC,6BAA6B,EAAEL;AACnC,CACJ,CAAC;AAED,OAAO,eAAeM,sBAAsBA,CAACC,QAAQ,EAAE;EACnD,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,MAAM,CAAC;MAAEF,QAAQ;MAAEG,YAAY,EAAE;IAAG,CAAC,CAAC;IAC9D,OAAOF,GAAG,CAACG,IAAI;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}