{"ast":null,"code":"import { BaseTransformOutputParser } from \"./transform.js\";\n/**\n * OutputParser that parses LLMResult into the top likely string.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n *\n * const chain = RunnableSequence.from([\n *   promptTemplate,\n *   new ChatOpenAI({}),\n *   new StringOutputParser(),\n * ]);\n *\n * const result = await chain.invoke({ topic: \"bears\" });\n * console.log(\"What do you call a bear with no teeth? A gummy bear!\");\n * ```\n */\nexport class StringOutputParser extends BaseTransformOutputParser {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"output_parsers\", \"string\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n  }\n  static lc_name() {\n    return \"StrOutputParser\";\n  }\n  /**\n   * Parses a string output from an LLM call. This method is meant to be\n   * implemented by subclasses to define how a string output from an LLM\n   * should be parsed.\n   * @param text The string output from an LLM call.\n   * @param callbacks Optional callbacks.\n   * @returns A promise of the parsed output.\n   */\n  parse(text) {\n    return Promise.resolve(text);\n  }\n  getFormatInstructions() {\n    return \"\";\n  }\n  _textContentToString(content) {\n    return content.text;\n  }\n  _imageUrlContentToString(_content) {\n    throw new Error(`Cannot coerce a multimodal \"image_url\" message part into a string.`);\n  }\n  _messageContentComplexToString(content) {\n    switch (content.type) {\n      case \"text\":\n        return this._textContentToString(content);\n      case \"image_url\":\n        return this._imageUrlContentToString(content);\n      default:\n        throw new Error(\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        `Cannot coerce \"${content.type}\" message part into a string.`);\n    }\n  }\n  _baseMessageContentToString(content) {\n    return content.reduce((acc, item) => acc + this._messageContentComplexToString(item), \"\");\n  }\n}","map":{"version":3,"names":["BaseTransformOutputParser","StringOutputParser","constructor","arguments","Object","defineProperty","enumerable","configurable","writable","value","lc_name","parse","text","Promise","resolve","getFormatInstructions","_textContentToString","content","_imageUrlContentToString","_content","Error","_messageContentComplexToString","type","_baseMessageContentToString","reduce","acc","item"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/@langchain/core/dist/output_parsers/string.js"],"sourcesContent":["import { BaseTransformOutputParser } from \"./transform.js\";\n/**\n * OutputParser that parses LLMResult into the top likely string.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n *\n * const chain = RunnableSequence.from([\n *   promptTemplate,\n *   new ChatOpenAI({}),\n *   new StringOutputParser(),\n * ]);\n *\n * const result = await chain.invoke({ topic: \"bears\" });\n * console.log(\"What do you call a bear with no teeth? A gummy bear!\");\n * ```\n */\nexport class StringOutputParser extends BaseTransformOutputParser {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"output_parsers\", \"string\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"StrOutputParser\";\n    }\n    /**\n     * Parses a string output from an LLM call. This method is meant to be\n     * implemented by subclasses to define how a string output from an LLM\n     * should be parsed.\n     * @param text The string output from an LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */\n    parse(text) {\n        return Promise.resolve(text);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n    _textContentToString(content) {\n        return content.text;\n    }\n    _imageUrlContentToString(_content) {\n        throw new Error(`Cannot coerce a multimodal \"image_url\" message part into a string.`);\n    }\n    _messageContentComplexToString(content) {\n        switch (content.type) {\n            case \"text\":\n                return this._textContentToString(content);\n            case \"image_url\":\n                return this._imageUrlContentToString(content);\n            default:\n                throw new Error(\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                `Cannot coerce \"${content.type}\" message part into a string.`);\n        }\n    }\n    _baseMessageContentToString(content) {\n        return content.reduce((acc, item) => acc + this._messageContentComplexToString(item), \"\");\n    }\n}\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,SAASD,yBAAyB,CAAC;EAC9DE,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnBC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,QAAQ;IACxD,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE;MAC3CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EACA,OAAOC,OAAOA,CAAA,EAAG;IACb,OAAO,iBAAiB;EAC5B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,KAAKA,CAACC,IAAI,EAAE;IACR,OAAOC,OAAO,CAACC,OAAO,CAACF,IAAI,CAAC;EAChC;EACAG,qBAAqBA,CAAA,EAAG;IACpB,OAAO,EAAE;EACb;EACAC,oBAAoBA,CAACC,OAAO,EAAE;IAC1B,OAAOA,OAAO,CAACL,IAAI;EACvB;EACAM,wBAAwBA,CAACC,QAAQ,EAAE;IAC/B,MAAM,IAAIC,KAAK,CAAE,oEAAmE,CAAC;EACzF;EACAC,8BAA8BA,CAACJ,OAAO,EAAE;IACpC,QAAQA,OAAO,CAACK,IAAI;MAChB,KAAK,MAAM;QACP,OAAO,IAAI,CAACN,oBAAoB,CAACC,OAAO,CAAC;MAC7C,KAAK,WAAW;QACZ,OAAO,IAAI,CAACC,wBAAwB,CAACD,OAAO,CAAC;MACjD;QACI,MAAM,IAAIG,KAAK;QACf;QACC,kBAAiBH,OAAO,CAACK,IAAK,+BAA8B,CAAC;IACtE;EACJ;EACAC,2BAA2BA,CAACN,OAAO,EAAE;IACjC,OAAOA,OAAO,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAG,IAAI,CAACJ,8BAA8B,CAACK,IAAI,CAAC,EAAE,EAAE,CAAC;EAC7F;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}