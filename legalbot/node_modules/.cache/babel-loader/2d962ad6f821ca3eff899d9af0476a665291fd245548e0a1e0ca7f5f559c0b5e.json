{"ast":null,"code":"/**\n *Returns the Clark distance between vectors a and b\n * @link [Clark algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function clark(a, b) {\n  let d = 0;\n  for (let i = 0; i < a.length; i++) {\n    d += (Math.abs(a[i] - b[i]) / (a[i] + b[i])) ** 2;\n  }\n  return Math.sqrt(d);\n}","map":{"version":3,"names":["clark","a","b","d","i","length","Math","abs","sqrt"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/ml-distance/src/distances/clark.ts"],"sourcesContent":["import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Clark distance between vectors a and b\n * @link [Clark algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function clark(a: NumberArray, b: NumberArray): number {\n  let d = 0;\n  for (let i = 0; i < a.length; i++) {\n    d += (Math.abs(a[i] - b[i]) / (a[i] + b[i])) ** 2;\n  }\n  return Math.sqrt(d);\n}\n"],"mappings":"AACA;;;;;;;AAOA,eAAc,SAAUA,KAAKA,CAACC,CAAc,EAAEC,CAAc;EAC1D,IAAIC,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACjCD,CAAC,IAAI,CAACG,IAAI,CAACC,GAAG,CAACN,CAAC,CAACG,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC,CAAC,IAAIH,CAAC,CAACG,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC,CAAC,KAAK,CAAC;;EAEnD,OAAOE,IAAI,CAACE,IAAI,CAACL,CAAC,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}