{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PineconeRecordSchema = exports.RecordSparseValuesSchema = exports.RecordValuesSchema = exports.RecordIdSchema = exports.PineconeConfigurationSchema = void 0;\nvar typebox_1 = require(\"@sinclair/typebox\");\nexports.PineconeConfigurationSchema = typebox_1.Type.Object({\n  apiKey: typebox_1.Type.String({\n    minLength: 1\n  }),\n  controllerHostUrl: typebox_1.Type.Optional(typebox_1.Type.String({\n    minLength: 1\n  })),\n  // fetchApi is a complex type that I don't really want to recreate in the\n  // form of a json schema (seems difficult and error prone). So we will\n  // rely on TypeScript to guide people in the right direction here.\n  // But declaring it here as Type.Any() is needed to avoid getting caught\n  // in the additionalProperties check.\n  fetchApi: typebox_1.Type.Optional(typebox_1.Type.Any()),\n  additionalHeaders: typebox_1.Type.Optional(typebox_1.Type.Any())\n}, {\n  additionalProperties: false\n});\nexports.RecordIdSchema = typebox_1.Type.String({\n  minLength: 1\n});\nexports.RecordValuesSchema = typebox_1.Type.Array(typebox_1.Type.Number());\nexports.RecordSparseValuesSchema = typebox_1.Type.Object({\n  indices: typebox_1.Type.Array(typebox_1.Type.Integer()),\n  values: typebox_1.Type.Array(typebox_1.Type.Number())\n}, {\n  additionalProperties: false\n});\nexports.PineconeRecordSchema = typebox_1.Type.Object({\n  id: exports.RecordIdSchema,\n  values: exports.RecordValuesSchema,\n  sparseValues: typebox_1.Type.Optional(exports.RecordSparseValuesSchema),\n  metadata: typebox_1.Type.Optional(typebox_1.Type.Object({}, {\n    additionalProperties: true\n  }))\n}, {\n  additionalProperties: false\n});","map":{"version":3,"names":["typebox_1","require","exports","PineconeConfigurationSchema","Type","Object","apiKey","String","minLength","controllerHostUrl","Optional","fetchApi","Any","additionalHeaders","additionalProperties","RecordIdSchema","RecordValuesSchema","Array","Number","RecordSparseValuesSchema","indices","Integer","values","PineconeRecordSchema","id","sparseValues","metadata"],"sources":["../../src/data/types.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAGaC,OAAA,CAAAC,2BAA2B,GAAGH,SAAA,CAAAI,IAAI,CAACC,MAAM,CACpD;EACEC,MAAM,EAAEN,SAAA,CAAAI,IAAI,CAACG,MAAM,CAAC;IAAEC,SAAS,EAAE;EAAC,CAAE,CAAC;EACrCC,iBAAiB,EAAET,SAAA,CAAAI,IAAI,CAACM,QAAQ,CAACV,SAAA,CAAAI,IAAI,CAACG,MAAM,CAAC;IAAEC,SAAS,EAAE;EAAC,CAAE,CAAC,CAAC;EAE/D;EACA;EACA;EACA;EACA;EACAG,QAAQ,EAAEX,SAAA,CAAAI,IAAI,CAACM,QAAQ,CAACV,SAAA,CAAAI,IAAI,CAACQ,GAAG,EAAE,CAAC;EAEnCC,iBAAiB,EAAEb,SAAA,CAAAI,IAAI,CAACM,QAAQ,CAACV,SAAA,CAAAI,IAAI,CAACQ,GAAG,EAAE;CAC5C,EACD;EAAEE,oBAAoB,EAAE;AAAK,CAAE,CAChC;AA2BYZ,OAAA,CAAAa,cAAc,GAAGf,SAAA,CAAAI,IAAI,CAACG,MAAM,CAAC;EAAEC,SAAS,EAAE;AAAC,CAAE,CAAC;AAC9CN,OAAA,CAAAc,kBAAkB,GAAGhB,SAAA,CAAAI,IAAI,CAACa,KAAK,CAACjB,SAAA,CAAAI,IAAI,CAACc,MAAM,EAAE,CAAC;AAC9ChB,OAAA,CAAAiB,wBAAwB,GAAGnB,SAAA,CAAAI,IAAI,CAACC,MAAM,CACjD;EACEe,OAAO,EAAEpB,SAAA,CAAAI,IAAI,CAACa,KAAK,CAACjB,SAAA,CAAAI,IAAI,CAACiB,OAAO,EAAE,CAAC;EACnCC,MAAM,EAAEtB,SAAA,CAAAI,IAAI,CAACa,KAAK,CAACjB,SAAA,CAAAI,IAAI,CAACc,MAAM,EAAE;CACjC,EACD;EAAEJ,oBAAoB,EAAE;AAAK,CAAE,CAChC;AACYZ,OAAA,CAAAqB,oBAAoB,GAAGvB,SAAA,CAAAI,IAAI,CAACC,MAAM,CAC7C;EACEmB,EAAE,EAAEtB,OAAA,CAAAa,cAAc;EAClBO,MAAM,EAAEpB,OAAA,CAAAc,kBAAkB;EAC1BS,YAAY,EAAEzB,SAAA,CAAAI,IAAI,CAACM,QAAQ,CAACR,OAAA,CAAAiB,wBAAwB,CAAC;EACrDO,QAAQ,EAAE1B,SAAA,CAAAI,IAAI,CAACM,QAAQ,CAACV,SAAA,CAAAI,IAAI,CAACC,MAAM,CAAC,EAAE,EAAE;IAAES,oBAAoB,EAAE;EAAI,CAAE,CAAC;CACxE,EACD;EAAEA,oBAAoB,EAAE;AAAK,CAAE,CAChC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}