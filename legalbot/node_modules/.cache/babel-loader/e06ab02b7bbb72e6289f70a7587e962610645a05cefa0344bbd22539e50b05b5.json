{"ast":null,"code":"/**\n *Returns the Probabilistic Symmetric distance between vectors a and b\n * @link [Probabilistic Symmetric algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function probabilisticSymmetric(a, b) {\n  let d = 0;\n  for (let i = 0; i < a.length; i++) {\n    d += (a[i] - b[i]) * (a[i] - b[i]) / (a[i] + b[i]);\n  }\n  return 2 * d;\n}","map":{"version":3,"names":["probabilisticSymmetric","a","b","d","i","length"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/ml-distance/src/distances/probabilisticSymmetric.ts"],"sourcesContent":["import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Probabilistic Symmetric distance between vectors a and b\n * @link [Probabilistic Symmetric algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function probabilisticSymmetric(\n  a: NumberArray,\n  b: NumberArray,\n): number {\n  let d = 0;\n  for (let i = 0; i < a.length; i++) {\n    d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n  }\n  return 2 * d;\n}\n"],"mappings":"AACA;;;;;;;AAOA,eAAc,SAAUA,sBAAsBA,CAC5CC,CAAc,EACdC,CAAc;EAEd,IAAIC,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACjCD,CAAC,IAAK,CAACF,CAAC,CAACG,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC,KAAKH,CAAC,CAACG,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC,CAAC,IAAKH,CAAC,CAACG,CAAC,CAAC,GAAGF,CAAC,CAACE,CAAC,CAAC,CAAC;;EAEtD,OAAO,CAAC,GAAGD,CAAC;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}