{"ast":null,"code":"/**\n *Returns the Wave Hedges distance between vectors p and q, and accepts the bitVector use, see the test case for an example\n * @link [Wave Hedges algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n * @param bitvector - bitVector\n *\n */\nexport default function waveHedges(a, b) {\n  let ans = 0;\n  for (let i = 0; i < a.length; i++) {\n    ans += 1 - Math.min(a[i], b[i]) / Math.max(a[i], b[i]);\n  }\n  return ans;\n}","map":{"version":3,"names":["waveHedges","a","b","ans","i","length","Math","min","max"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/ml-distance/src/distances/waveHedges.ts"],"sourcesContent":["import { NumberArray } from 'cheminfo-types';\n/**\n *Returns the Wave Hedges distance between vectors p and q, and accepts the bitVector use, see the test case for an example\n * @link [Wave Hedges algorithm](https://www.naun.org/main/NAUN/ijmmas/mmmas-49.pdf)\n * @param a - first vector\n * @param b - second vector\n * @param bitvector - bitVector\n *\n */\nexport default function waveHedges(a: NumberArray, b: NumberArray): number {\n  let ans = 0;\n  for (let i = 0; i < a.length; i++) {\n    ans += 1 - Math.min(a[i], b[i]) / Math.max(a[i], b[i]);\n  }\n  return ans;\n}\n"],"mappings":"AACA;;;;;;;;AAQA,eAAc,SAAUA,UAAUA,CAACC,CAAc,EAAEC,CAAc;EAC/D,IAAIC,GAAG,GAAG,CAAC;EACX,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACjCD,GAAG,IAAI,CAAC,GAAGG,IAAI,CAACC,GAAG,CAACN,CAAC,CAACG,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,CAAC,GAAGE,IAAI,CAACE,GAAG,CAACP,CAAC,CAACG,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,CAAC;;EAExD,OAAOD,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}