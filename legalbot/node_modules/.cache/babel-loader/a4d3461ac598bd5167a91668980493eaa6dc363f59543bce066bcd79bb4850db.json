{"ast":null,"code":"import { BaseRetriever } from \"./retrievers.js\";\nimport { Serializable } from \"./load/serializable.js\";\n/**\n * Class for performing document retrieval from a VectorStore. Can perform\n * similarity search or maximal marginal relevance search.\n */\nexport class VectorStoreRetriever extends BaseRetriever {\n  static lc_name() {\n    return \"VectorStoreRetriever\";\n  }\n  get lc_namespace() {\n    return [\"langchain_core\", \"vectorstores\"];\n  }\n  _vectorstoreType() {\n    return this.vectorStore._vectorstoreType();\n  }\n  constructor(fields) {\n    super(fields);\n    Object.defineProperty(this, \"vectorStore\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"k\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 4\n    });\n    Object.defineProperty(this, \"searchType\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"similarity\"\n    });\n    Object.defineProperty(this, \"searchKwargs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"filter\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.vectorStore = fields.vectorStore;\n    this.k = fields.k ?? this.k;\n    this.searchType = fields.searchType ?? this.searchType;\n    this.filter = fields.filter;\n    if (fields.searchType === \"mmr\") {\n      this.searchKwargs = fields.searchKwargs;\n    }\n  }\n  async _getRelevantDocuments(query, runManager) {\n    if (this.searchType === \"mmr\") {\n      if (typeof this.vectorStore.maxMarginalRelevanceSearch !== \"function\") {\n        throw new Error(`The vector store backing this retriever, ${this._vectorstoreType()} does not support max marginal relevance search.`);\n      }\n      return this.vectorStore.maxMarginalRelevanceSearch(query, {\n        k: this.k,\n        filter: this.filter,\n        ...this.searchKwargs\n      }, runManager?.getChild(\"vectorstore\"));\n    }\n    return this.vectorStore.similaritySearch(query, this.k, this.filter, runManager?.getChild(\"vectorstore\"));\n  }\n  async addDocuments(documents, options) {\n    return this.vectorStore.addDocuments(documents, options);\n  }\n}\n/**\n * Abstract class representing a store of vectors. Provides methods for\n * adding vectors and documents, deleting from the store, and searching\n * the store.\n */\nexport class VectorStore extends Serializable {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(embeddings, dbConfig) {\n    super(dbConfig);\n    // Only ever instantiated in main LangChain\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain\", \"vectorstores\", this._vectorstoreType()]\n    });\n    Object.defineProperty(this, \"embeddings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.embeddings = embeddings;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async delete(_params) {\n    throw new Error(\"Not implemented.\");\n  }\n  async similaritySearch(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n  ) {\n    const results = await this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n    return results.map(result => result[0]);\n  }\n  async similaritySearchWithScore(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n  ) {\n    return this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n  }\n  static fromTexts(_texts, _metadatas, _embeddings,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _dbConfig) {\n    throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n  }\n  static fromDocuments(_docs, _embeddings,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _dbConfig) {\n    throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n  }\n  asRetriever(kOrFields, filter, callbacks, tags, metadata, verbose) {\n    if (typeof kOrFields === \"number\") {\n      return new VectorStoreRetriever({\n        vectorStore: this,\n        k: kOrFields,\n        filter,\n        tags: [...(tags ?? []), this._vectorstoreType()],\n        metadata,\n        verbose,\n        callbacks\n      });\n    } else {\n      const params = {\n        vectorStore: this,\n        k: kOrFields?.k,\n        filter: kOrFields?.filter,\n        tags: [...(kOrFields?.tags ?? []), this._vectorstoreType()],\n        metadata: kOrFields?.metadata,\n        verbose: kOrFields?.verbose,\n        callbacks: kOrFields?.callbacks,\n        searchType: kOrFields?.searchType\n      };\n      if (kOrFields?.searchType === \"mmr\") {\n        return new VectorStoreRetriever({\n          ...params,\n          searchKwargs: kOrFields.searchKwargs\n        });\n      }\n      return new VectorStoreRetriever({\n        ...params\n      });\n    }\n  }\n}\n/**\n * Abstract class extending VectorStore with functionality for saving and\n * loading the vector store.\n */\nexport class SaveableVectorStore extends VectorStore {\n  static load(_directory, _embeddings) {\n    throw new Error(\"Not implemented\");\n  }\n}","map":{"version":3,"names":["BaseRetriever","Serializable","VectorStoreRetriever","lc_name","lc_namespace","_vectorstoreType","vectorStore","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","k","searchType","filter","searchKwargs","_getRelevantDocuments","query","runManager","maxMarginalRelevanceSearch","Error","getChild","similaritySearch","addDocuments","documents","options","VectorStore","embeddings","dbConfig","delete","_params","undefined","_callbacks","results","similaritySearchVectorWithScore","embedQuery","map","result","similaritySearchWithScore","fromTexts","_texts","_metadatas","_embeddings","_dbConfig","fromDocuments","_docs","asRetriever","kOrFields","callbacks","tags","metadata","verbose","params","SaveableVectorStore","load","_directory"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/@langchain/core/dist/vectorstores.js"],"sourcesContent":["import { BaseRetriever, } from \"./retrievers.js\";\nimport { Serializable } from \"./load/serializable.js\";\n/**\n * Class for performing document retrieval from a VectorStore. Can perform\n * similarity search or maximal marginal relevance search.\n */\nexport class VectorStoreRetriever extends BaseRetriever {\n    static lc_name() {\n        return \"VectorStoreRetriever\";\n    }\n    get lc_namespace() {\n        return [\"langchain_core\", \"vectorstores\"];\n    }\n    _vectorstoreType() {\n        return this.vectorStore._vectorstoreType();\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"vectorStore\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"k\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 4\n        });\n        Object.defineProperty(this, \"searchType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"similarity\"\n        });\n        Object.defineProperty(this, \"searchKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"filter\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.vectorStore = fields.vectorStore;\n        this.k = fields.k ?? this.k;\n        this.searchType = fields.searchType ?? this.searchType;\n        this.filter = fields.filter;\n        if (fields.searchType === \"mmr\") {\n            this.searchKwargs = fields.searchKwargs;\n        }\n    }\n    async _getRelevantDocuments(query, runManager) {\n        if (this.searchType === \"mmr\") {\n            if (typeof this.vectorStore.maxMarginalRelevanceSearch !== \"function\") {\n                throw new Error(`The vector store backing this retriever, ${this._vectorstoreType()} does not support max marginal relevance search.`);\n            }\n            return this.vectorStore.maxMarginalRelevanceSearch(query, {\n                k: this.k,\n                filter: this.filter,\n                ...this.searchKwargs,\n            }, runManager?.getChild(\"vectorstore\"));\n        }\n        return this.vectorStore.similaritySearch(query, this.k, this.filter, runManager?.getChild(\"vectorstore\"));\n    }\n    async addDocuments(documents, options) {\n        return this.vectorStore.addDocuments(documents, options);\n    }\n}\n/**\n * Abstract class representing a store of vectors. Provides methods for\n * adding vectors and documents, deleting from the store, and searching\n * the store.\n */\nexport class VectorStore extends Serializable {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(embeddings, dbConfig) {\n        super(dbConfig);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain\", \"vectorstores\", this._vectorstoreType()]\n        });\n        Object.defineProperty(this, \"embeddings\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.embeddings = embeddings;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async delete(_params) {\n        throw new Error(\"Not implemented.\");\n    }\n    async similaritySearch(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        const results = await this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n        return results.map((result) => result[0]);\n    }\n    async similaritySearchWithScore(query, k = 4, filter = undefined, _callbacks = undefined // implement passing to embedQuery later\n    ) {\n        return this.similaritySearchVectorWithScore(await this.embeddings.embedQuery(query), k, filter);\n    }\n    static fromTexts(_texts, _metadatas, _embeddings, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    static fromDocuments(_docs, _embeddings, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _dbConfig) {\n        throw new Error(\"the Langchain vectorstore implementation you are using forgot to override this, please report a bug\");\n    }\n    asRetriever(kOrFields, filter, callbacks, tags, metadata, verbose) {\n        if (typeof kOrFields === \"number\") {\n            return new VectorStoreRetriever({\n                vectorStore: this,\n                k: kOrFields,\n                filter,\n                tags: [...(tags ?? []), this._vectorstoreType()],\n                metadata,\n                verbose,\n                callbacks,\n            });\n        }\n        else {\n            const params = {\n                vectorStore: this,\n                k: kOrFields?.k,\n                filter: kOrFields?.filter,\n                tags: [...(kOrFields?.tags ?? []), this._vectorstoreType()],\n                metadata: kOrFields?.metadata,\n                verbose: kOrFields?.verbose,\n                callbacks: kOrFields?.callbacks,\n                searchType: kOrFields?.searchType,\n            };\n            if (kOrFields?.searchType === \"mmr\") {\n                return new VectorStoreRetriever({\n                    ...params,\n                    searchKwargs: kOrFields.searchKwargs,\n                });\n            }\n            return new VectorStoreRetriever({ ...params });\n        }\n    }\n}\n/**\n * Abstract class extending VectorStore with functionality for saving and\n * loading the vector store.\n */\nexport class SaveableVectorStore extends VectorStore {\n    static load(_directory, _embeddings) {\n        throw new Error(\"Not implemented\");\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}