{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Pinecone = void 0;\nvar control_1 = require(\"./control\");\nvar indexHostSingleton_1 = require(\"./data/indexHostSingleton\");\nvar errors_1 = require(\"./errors\");\nvar data_1 = require(\"./data\");\nvar validator_1 = require(\"./validator\");\n/**\n * The `Pinecone` class is the main entrypoint to this sdk. You will use\n * instances of it to create and manage indexes as well as perform data\n * operations on those indexes after they are created.\n *\n * ### Initializing the client\n *\n * There is one piece of configuration required to use the Pinecone client: an API key. This value can be passed using environment variables or in code through a configuration object. Find your API key in the console dashboard at [https://app.pinecone.io](https://app.pinecone.io)\n *\n * ### Using environment variables\n *\n * The environment variables used to configure the client are the following:\n *\n * ```bash\n * export PINECONE_API_KEY=\"your_api_key\"\n * export PINECONE_CONTROLLER_HOST=\"your_controller_host\"\n * ```\n *\n * When these environment variables are set, the client constructor does not require any additional arguments.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pc = new Pinecone();\n * ```\n *\n * ### Using a configuration object\n *\n * If you prefer to pass configuration in code, the constructor accepts a config object containing the `apiKey` and `environment` values. This\n * could be useful if your application needs to interact with multiple projects, each with a different configuration.\n *\n * ```typescript\n * import { Pinecone } from '@pinecone-database/pinecone';\n *\n * const pc = new Pinecone({\n *   apiKey: 'your_api_key',\n * });\n *\n * ```\n *\n * See {@link PineconeConfiguration} for a full description of available configuration options.\n */\nvar Pinecone = /** @class */function () {\n  /**\n   * @example\n   * ```\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   *\n   * const pc = new Pinecone({\n   *  apiKey: 'my-api-key',\n   * });\n   * ```\n   *\n   * @constructor\n   * @param options - The configuration options for the Pinecone client: {@link PineconeConfiguration}.\n   */\n  function Pinecone(options) {\n    if (options === undefined) {\n      options = this._readEnvironmentConfig();\n    }\n    this._validateConfig(options);\n    this.config = options;\n    var api = (0, control_1.indexOperationsBuilder)(this.config);\n    this._configureIndex = (0, control_1.configureIndex)(api);\n    this._createCollection = (0, control_1.createCollection)(api);\n    this._createIndex = (0, control_1.createIndex)(api);\n    this._describeCollection = (0, control_1.describeCollection)(api);\n    this._deleteCollection = (0, control_1.deleteCollection)(api);\n    this._describeIndex = (0, control_1.describeIndex)(api);\n    this._deleteIndex = (0, control_1.deleteIndex)(api);\n    this._listCollections = (0, control_1.listCollections)(api);\n    this._listIndexes = (0, control_1.listIndexes)(api);\n  }\n  /**\n   * @internal\n   * This method is used by {@link Pinecone.constructor} to read configuration from environment variables.\n   *\n   * It looks for the following environment variables:\n   * - `PINECONE_API_KEY`\n   * - `PINECONE_CONTROLLER_HOST`\n   *\n   * @returns A {@link PineconeConfiguration} object populated with values found in environment variables.\n   */\n  Pinecone.prototype._readEnvironmentConfig = function () {\n    if (typeof process === 'undefined' || !process || !process.env) {\n      throw new errors_1.PineconeEnvironmentVarsNotSupportedError('Your execution environment does not support reading environment variables from process.env, so a configuration object is required when calling new Pinecone()');\n    }\n    var environmentConfig = {};\n    var requiredEnvVarMap = {\n      apiKey: 'PINECONE_API_KEY'\n    };\n    var missingVars = [];\n    for (var _i = 0, _a = Object.entries(requiredEnvVarMap); _i < _a.length; _i++) {\n      var _b = _a[_i],\n        key = _b[0],\n        envVar = _b[1];\n      var value = process.env[envVar] || '';\n      if (!value) {\n        missingVars.push(envVar);\n      }\n      environmentConfig[key] = value;\n    }\n    if (missingVars.length > 0) {\n      throw new errors_1.PineconeConfigurationError(\"Since you called 'new Pinecone()' with no configuration object, we attempted to find client configuration in environment variables but the required environment variables were not set. Missing variables: \".concat(missingVars.join(', '), \".\"));\n    }\n    var optionalEnvVarMap = {\n      controllerHostUrl: 'PINECONE_CONTROLLER_HOST'\n    };\n    for (var _c = 0, _d = Object.entries(optionalEnvVarMap); _c < _d.length; _c++) {\n      var _e = _d[_c],\n        key = _e[0],\n        envVar = _e[1];\n      var value = process.env[envVar];\n      if (value !== undefined) {\n        environmentConfig[key] = value;\n      }\n    }\n    return environmentConfig;\n  };\n  /**\n   * Describe a Pinecone index\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * const indexModel = await pc.describeIndex('my-index')\n   * console.log(indexModel)\n   * // {\n   * //     name: 'sample-index-1',\n   * //     dimension: 3,\n   * //     metric: 'cosine',\n   * //     host: 'sample-index-1-1390950.svc.apw5-4e34-81fa.pinecone.io',\n   * //     spec: {\n   * //           pod: undefined,\n   * //           serverless: {\n   * //               cloud: 'aws',\n   * //               region: 'us-west-2'\n   * //           }\n   * //     },\n   * //     status: {\n   * //           ready: true,\n   * //           state: 'Ready'\n   * //     }\n   * // }\n   * ```\n   *\n   * @param indexName - The name of the index to describe.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves to {@link IndexModel}.\n   */\n  Pinecone.prototype.describeIndex = function (indexName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var indexModel;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._describeIndex(indexName)];\n          case 1:\n            indexModel = _a.sent();\n            // For any describeIndex calls we want to update the IndexHostSingleton cache.\n            // This prevents unneeded calls to describeIndex for resolving the host for vector operations.\n            if (indexModel.host) {\n              indexHostSingleton_1.IndexHostSingleton._set(this.config, indexName, indexModel.host);\n            }\n            return [2 /*return*/, Promise.resolve(indexModel)];\n        }\n      });\n    });\n  };\n  /**\n   * List all Pinecone indexes\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * const indexList = await pc.listIndexes()\n   * console.log(indexList)\n   * // {\n   * //     indexes: [\n   * //       {\n   * //         name: \"sample-index-1\",\n   * //         dimension: 3,\n   * //         metric: \"cosine\",\n   * //         host: \"sample-index-1-1234567.svc.apw5-2e18-32fa.pinecone.io\",\n   * //         spec: {\n   * //           serverless: {\n   * //             cloud: \"aws\",\n   * //             region: \"us-west-2\"\n   * //           }\n   * //         },\n   * //         status: {\n   * //           ready: true,\n   * //           state: \"Ready\"\n   * //         }\n   * //       },\n   * //       {\n   * //         name: \"sample-index-2\",\n   * //         dimension: 3,\n   * //         metric: \"cosine\",\n   * //         host: \"sample-index-2-1234567.svc.apw2-5e76-83fa.pinecone.io\",\n   * //         spec: {\n   * //           serverless: {\n   * //             cloud: \"aws\",\n   * //             region: \"us-west-2\"\n   * //           }\n   * //         },\n   * //         status: {\n   * //           ready: true,\n   * //           state: \"Ready\"\n   * //         }\n   * //       }\n   * //     ]\n   * //   }\n   * ```\n   *\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves to {@link IndexList}.\n   */\n  Pinecone.prototype.listIndexes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var indexList, i, index;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listIndexes()];\n          case 1:\n            indexList = _a.sent();\n            // For any listIndexes calls we want to update the IndexHostSingleton cache.\n            // This prevents unneeded calls to describeIndex for resolving the host for index operations.\n            if (indexList.indexes && indexList.indexes.length > 0) {\n              for (i = 0; i < indexList.indexes.length; i++) {\n                index = indexList.indexes[i];\n                indexHostSingleton_1.IndexHostSingleton._set(this.config, index.name, index.host);\n              }\n            }\n            return [2 /*return*/, Promise.resolve(indexList)];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new index.\n   *\n   * @example\n   * The minimum required configuration to create an index is the index `name`, `dimension`, and `spec`.\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   *\n   * const pc = new Pinecone();\n   *\n   * await pc.createIndex({ name: 'my-index', dimension: 128, spec: { serverless: { cloud: 'aws', region: 'us-west-2' }}})\n   * ```\n   *\n   * @example\n   *\n   * > ⚠️ **Warning**\n   * >\n   * > Serverless indexes are in **public preview** and are available only on AWS in the `us-west-2` region. Check the [current limitations](https://docs.pinecone.io/docs/limits#serverless-index-limitations) and test thoroughly before using it in production.\n   *\n   * The `spec` object defines how the index should be deployed. For serverless indexes, you define only the cloud and region where the index should be hosted.\n   * For pod-based indexes, you define the environment where the index should be hosted, the pod type and size to use, and other index characteristics.\n   * In a different example, you can create a pod-based index by specifying the `pod` spec object with the `environment`, `pods`, `podType`, and `metric` properties.\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.createIndex({\n   *  name: 'my-index',\n   *  dimension: 1536,\n   *  metric: 'cosine',\n   *  spec: {\n   *    pod: {\n   *      environment: 'us-west-2-gcp',\n   *      pods: 1,\n   *      podType: 'p1.x1'\n   *    }\n   *   }\n   * })\n   * ```\n   *\n   * @example\n   * If you would like to create the index only if it does not already exist, you can use the `suppressConflicts` boolean option.\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.createIndex({\n   *   name: 'my-index',\n   *   dimension: 1536,\n   *   spec: {\n   *     serverless: {\n   *       cloud: 'aws',\n   *       region: 'us-west-2'\n   *     }\n   *   },\n   *   suppressConflicts: true\n   * })\n   * ```\n   *\n   * @example\n   * If you plan to begin upserting immediately after index creation is complete, you should use the `waitUntilReady` option. Otherwise, the index may not be ready to receive data operations when you attempt to upsert.\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.createIndex({\n   *  name: 'my-index',\n   *   spec: {\n   *     serverless: {\n   *       cloud: 'aws',\n   *       region: 'us-west-2'\n   *     }\n   *   },\n   *  waitUntilReady: true\n   * });\n   *\n   * const records = [\n   *   // PineconeRecord objects with your embedding values\n   * ]\n   * await pc.index('my-index').upsert(records)\n   * ```\n   *\n   * @example\n   * By default all metadata fields are indexed when records are upserted with metadata, but if you want to improve performance you can specify the specific fields you want to index. This example is showing a few hypothetical metadata fields, but the values you'd use depend on what metadata you plan to store with records in your Pinecone index.\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.createIndex({\n   *   name: 'my-index',\n   *   dimension: 1536,\n   *   spec: {\n   *     serverless: {\n   *       cloud: 'aws',\n   *       region: 'us-west-2',\n   *       metadataConfig: { 'indexed' : ['productName', 'productDescription'] }\n   *     }\n   *   },\n   * })\n   * ```\n   *\n   * @param options - The index configuration.\n   *\n   * @see [Distance metrics](https://docs.pinecone.io/docs/indexes#distance-metrics)\n   * @see [Pod types and sizes](https://docs.pinecone.io/docs/indexes#pods-pod-types-and-pod-sizes)\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeBadRequestError} when index creation fails due to invalid parameters being specified or other problem such as project quotas limiting the creation of any additional indexes.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @throws {@link Errors.PineconeConflictError} when attempting to create an index using a name that already exists in your project.\n   * @returns A promise that resolves to {@link IndexModel} when the request to create the index is completed. Note that the index is not immediately ready to use. You can use the {@link describeIndex} function to check the status of the index.\n   */\n  Pinecone.prototype.createIndex = function (options) {\n    return this._createIndex(options);\n  };\n  /**\n   * Deletes an index\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.deleteIndex('my-index')\n   * ```\n   *\n   * @param indexName - The name of the index to delete.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @returns A promise that resolves when the request to delete the index is completed.\n   */\n  Pinecone.prototype.deleteIndex = function (indexName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._deleteIndex(indexName)];\n          case 1:\n            _a.sent();\n            // When an index is deleted, we need to evict the host from the IndexHostSingleton cache.\n            indexHostSingleton_1.IndexHostSingleton._delete(this.config, indexName);\n            return [2 /*return*/, Promise.resolve()];\n        }\n      });\n    });\n  };\n  /**\n   * Configure an index\n   *\n   * Use this method to update configuration on an existing index. You can update the number of replicas, and pod type.\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.configureIndex('my-index', { replicas: 2, podType: 'p1.x2' })\n   * ```\n   *\n   * @param indexName - The name of the index to configure.\n   * @param options - The configuration properties you would like to update\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves to {@link IndexModel} when the request to configure the index is completed.\n   */\n  Pinecone.prototype.configureIndex = function (indexName, options) {\n    return this._configureIndex(indexName, options);\n  };\n  /**\n   * Create a new collection from an existing index\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * const indexList = await pc.listIndexes()\n   * const indexName = indexList.indexes[0].name;\n   * await pc.createCollection({\n   *  name: 'my-collection',\n   *  source: indexName\n   * })\n   * ```\n   *\n   * @param options - The collection configuration.\n   * @param options.name - The name of the collection. Must be unique within the project and contain alphanumeric and hyphen characters. The name must start and end with alphanumeric characters.\n   * @param options.source - The name of the index to use as the source for the collection.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns a promise that resolves to {@link CollectionModel} when the request to create the collection is completed.\n   */\n  Pinecone.prototype.createCollection = function (options) {\n    return this._createCollection(options);\n  };\n  /**\n   * List all collections in a project\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.listCollections()\n   * ```\n   *\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves to {@link CollectionList}.\n   */\n  Pinecone.prototype.listCollections = function () {\n    return this._listCollections();\n  };\n  /**\n   * Delete a collection by collection name\n   *\n   * @example\n   * ```\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * const collectionList = await pc.listCollections()\n   * const collectionName = collectionList.collections[0].name;\n   * await pc.deleteCollection(collectionName)\n   * ```\n   *\n   * @param collectionName - The name of the collection to delete.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves when the request to delete the collection is completed.\n   */\n  Pinecone.prototype.deleteCollection = function (collectionName) {\n    return this._deleteCollection(collectionName);\n  };\n  /**\n   * Describe a collection\n   *\n   * @example\n   * ```js\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone();\n   *\n   * await pc.describeCollection('my-collection')\n   * ```\n   *\n   * @param collectionName - The name of the collection to describe.\n   * @throws {@link Errors.PineconeArgumentError} when arguments passed to the method fail a runtime validation.\n   * @throws {@link Errors.PineconeConnectionError} when network problems or an outage of Pinecone's APIs prevent the request from being completed.\n   * @returns A promise that resolves to a {@link CollectionModel}.\n   */\n  Pinecone.prototype.describeCollection = function (collectionName) {\n    return this._describeCollection(collectionName);\n  };\n  /** @internal */\n  Pinecone.prototype._validateConfig = function (options) {\n    (0, validator_1.buildValidator)('The client configuration', data_1.PineconeConfigurationSchema)(options);\n  };\n  /**\n   * @returns The configuration object that was passed to the Pinecone constructor.\n   */\n  Pinecone.prototype.getConfig = function () {\n    return this.config;\n  };\n  /**\n   * Targets a specific index for performing data operations.\n   *\n   * ```typescript\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   * const pc = new Pinecone()\n   *\n   * const index = pc.index('index-name')\n   * ```\n   *\n   * #### Targeting an index, with user-defined Metadata types\n   *\n   * If you are storing metadata alongside your vector values inside your Pinecone records, you can pass a type parameter to `index()` in order to get proper TypeScript typechecking when upserting and querying data.\n   *\n   * ```typescript\n   * import { Pinecone } from '@pinecone-database/pinecone';\n   *\n   * const pc = new Pinecone();\n   *\n   * type MovieMetadata = {\n   *   title: string,\n   *   runtime: numbers,\n   *   genre: 'comedy' | 'horror' | 'drama' | 'action'\n   * }\n   *\n   * // Specify a custom metadata type while targeting the index\n   * const index = pc.index<MovieMetadata>('test-index');\n   *\n   * // Now you get type errors if upserting malformed metadata\n   * await index.upsert([{\n   *   id: '1234',\n   *   values: [\n   *     .... // embedding values\n   *   ],\n   *   metadata: {\n   *     genre: 'Gone with the Wind',\n   *     runtime: 238,\n   *     genre: 'drama',\n   *\n   *     // @ts-expect-error because category property not in MovieMetadata\n   *     category: 'classic'\n   *   }\n   * }])\n   *\n   * const results = await index.query({\n   *    vector: [\n   *     ... // query embedding\n   *    ],\n   *    filter: { genre: { '$eq': 'drama' }}\n   * })\n   * const movie = results.matches[0];\n   *\n   * if (movie.metadata) {\n   *   // Since we passed the MovieMetadata type parameter above,\n   *   // we can interact with metadata fields without having to\n   *   // do any typecasting.\n   *   const { title, runtime, genre } = movie.metadata;\n   *   console.log(`The best match in drama was ${title}`)\n   * }\n   * ```\n   *\n   * @typeParam T - The type of metadata associated with each record.\n   * @param indexName - The name of the index to target.\n   * @param indexHostUrl - An optional host url to use for operations against this index. If not provided, the host url will be resolved by calling {@link describeIndex}.\n   * @typeParam T - The type of the metadata object associated with each record.\n   * @returns An {@link Index} object that can be used to perform data operations.\n   */\n  Pinecone.prototype.index = function (indexName, indexHostUrl) {\n    return new data_1.Index(indexName, this.config, undefined, indexHostUrl);\n  };\n  /**\n   * {@inheritDoc index}\n   */\n  // Alias method to match the Python SDK capitalization\n  Pinecone.prototype.Index = function (indexName, indexHostUrl) {\n    return this.index(indexName, indexHostUrl);\n  };\n  return Pinecone;\n}();\nexports.Pinecone = Pinecone;","map":{"version":3,"names":["control_1","require","indexHostSingleton_1","errors_1","data_1","validator_1","Pinecone","options","undefined","_readEnvironmentConfig","_validateConfig","config","api","indexOperationsBuilder","_configureIndex","configureIndex","_createCollection","createCollection","_createIndex","createIndex","_describeCollection","describeCollection","_deleteCollection","deleteCollection","_describeIndex","describeIndex","_deleteIndex","deleteIndex","_listCollections","listCollections","_listIndexes","listIndexes","prototype","process","env","PineconeEnvironmentVarsNotSupportedError","environmentConfig","requiredEnvVarMap","apiKey","missingVars","_i","_a","Object","entries","length","_b","key","envVar","value","push","PineconeConfigurationError","concat","join","optionalEnvVarMap","controllerHostUrl","_c","_d","_e","indexName","indexModel","sent","host","IndexHostSingleton","_set","Promise","resolve","indexList","indexes","i","index","name","_delete","collectionName","buildValidator","PineconeConfigurationSchema","getConfig","indexHostUrl","Index","exports"],"sources":["../src/pinecone.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}