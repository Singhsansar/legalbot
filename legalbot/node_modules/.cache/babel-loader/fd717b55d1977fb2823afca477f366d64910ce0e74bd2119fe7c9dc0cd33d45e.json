{"ast":null,"code":"const API = {\n  GetChatbotResponse: async message => {\n    const apiKey = \"YOUR_API_KEY\";\n    const endpoint = \"https://api.openai.com/v1/chat/completions\";\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: \"text-davinci-002\",\n        messages: [{\n          role: \"user\",\n          content: message\n        }]\n      })\n    };\n    try {\n      const response = await fetch(endpoint, requestOptions);\n      const data = await response.json();\n      const botMessage = data.choices[0].message.content;\n      return botMessage;\n    } catch (error) {\n      console.error(\"Error fetching ChatGPT response:\", error);\n      return \"Error: Failed to fetch response\";\n    }\n  }\n};\nexport default API;","map":{"version":3,"names":["API","GetChatbotResponse","message","apiKey","endpoint","requestOptions","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","response","fetch","data","json","botMessage","choices","error","console"],"sources":["/home/nikhil/legalbot/legalbot/src/ChatbotAPI.js"],"sourcesContent":["const API = {\n  GetChatbotResponse: async message => {\n    const apiKey = \"YOUR_API_KEY\";\n    const endpoint = \"https://api.openai.com/v1/chat/completions\";\n\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body: JSON.stringify({\n        model: \"text-davinci-002\",\n        messages: [\n          {\n            role: \"user\",\n            content: message,\n          },\n        ],\n      }),\n    };\n\n    try {\n      const response = await fetch(endpoint, requestOptions);\n      const data = await response.json();\n      const botMessage = data.choices[0].message.content;\n      return botMessage;\n    } catch (error) {\n      console.error(\"Error fetching ChatGPT response:\", error);\n      return \"Error: Failed to fetch response\";\n    }\n  },\n};\n\nexport default API;\n"],"mappings":"AAAA,MAAMA,GAAG,GAAG;EACVC,kBAAkB,EAAE,MAAMC,OAAO,IAAI;IACnC,MAAMC,MAAM,GAAG,cAAc;IAC7B,MAAMC,QAAQ,GAAG,4CAA4C;IAE7D,MAAMC,cAAc,GAAG;MACrBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAG,UAASL,MAAO;MAClC,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,kBAAkB;QACzBC,QAAQ,EAAE,CACR;UACEC,IAAI,EAAE,MAAM;UACZC,OAAO,EAAEb;QACX,CAAC;MAEL,CAAC;IACH,CAAC;IAED,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACb,QAAQ,EAAEC,cAAc,CAAC;MACtD,MAAMa,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,MAAMC,UAAU,GAAGF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,CAACnB,OAAO,CAACa,OAAO;MAClD,OAAOK,UAAU;IACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO,iCAAiC;IAC1C;EACF;AACF,CAAC;AAED,eAAetB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}