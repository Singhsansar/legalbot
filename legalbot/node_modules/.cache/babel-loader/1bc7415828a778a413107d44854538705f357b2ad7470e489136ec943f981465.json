{"ast":null,"code":"/**\n * Returns the average of cosine distances between vectors a and b\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function cosine(a, b) {\n  let p = 0;\n  let p2 = 0;\n  let q2 = 0;\n  for (let i = 0; i < a.length; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (Math.sqrt(p2) * Math.sqrt(q2));\n}","map":{"version":3,"names":["cosine","a","b","p","p2","q2","i","length","Math","sqrt"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/ml-distance/src/similarities/cosine.ts"],"sourcesContent":["import { NumberArray } from 'cheminfo-types';\n/**\n * Returns the average of cosine distances between vectors a and b\n * @param a - first vector\n * @param b - second vector\n *\n */\nexport default function cosine(a: NumberArray, b: NumberArray): number {\n  let p = 0;\n  let p2 = 0;\n  let q2 = 0;\n  for (let i = 0; i < a.length; i++) {\n    p += a[i] * b[i];\n    p2 += a[i] * a[i];\n    q2 += b[i] * b[i];\n  }\n  return p / (Math.sqrt(p2) * Math.sqrt(q2));\n}\n"],"mappings":"AACA;;;;;;AAMA,eAAc,SAAUA,MAAMA,CAACC,CAAc,EAAEC,CAAc;EAC3D,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACjCH,CAAC,IAAIF,CAAC,CAACK,CAAC,CAAC,GAAGJ,CAAC,CAACI,CAAC,CAAC;IAChBF,EAAE,IAAIH,CAAC,CAACK,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACjBD,EAAE,IAAIH,CAAC,CAACI,CAAC,CAAC,GAAGJ,CAAC,CAACI,CAAC,CAAC;;EAEnB,OAAOH,CAAC,IAAIK,IAAI,CAACC,IAAI,CAACL,EAAE,CAAC,GAAGI,IAAI,CAACC,IAAI,CAACJ,EAAE,CAAC,CAAC;AAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}