{"ast":null,"code":"import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n  return mainCreateTree(spectrum[0], spectrum[1], from, to, minWindow, threshold);\n}\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n  if (sum < threshold) {\n    return null;\n  }\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(sum, center, mainCreateTree(X, Y, from, center, minWindow, threshold), mainCreateTree(X, Y, center, to, minWindow, threshold));\n    }\n  }\n}\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}","map":{"version":3,"names":["binarySearch","ascending","createTree","spectrum","options","X","minWindow","threshold","from","to","length","mainCreateTree","Y","start","sum","center","i","Tree","constructor","left","right"],"sources":["/home/nikhil/legalbot/legalbot/node_modules/ml-tree-similarity/src/createTree.js"],"sourcesContent":["import binarySearch from 'binary-search';\nimport { ascending } from 'num-sort';\n\n/**\n * Function that creates the tree\n * @param {Array<Array<number>>} spectrum\n * @param {object} [options]\n * @return {Tree|null}\n * left and right have the same structure than the parent,\n * or are null if they are leaves\n */\nexport function createTree(spectrum, options = {}) {\n  var X = spectrum[0];\n  const {\n    minWindow = 0.16,\n    threshold = 0.01,\n    from = X[0],\n    to = X[X.length - 1]\n  } = options;\n\n  return mainCreateTree(\n    spectrum[0],\n    spectrum[1],\n    from,\n    to,\n    minWindow,\n    threshold\n  );\n}\n\nfunction mainCreateTree(X, Y, from, to, minWindow, threshold) {\n  if (to - from < minWindow) {\n    return null;\n  }\n\n  // search first point\n  var start = binarySearch(X, from, ascending);\n  if (start < 0) {\n    start = ~start;\n  }\n\n  // stop at last point\n  var sum = 0;\n  var center = 0;\n  for (var i = start; i < X.length; i++) {\n    if (X[i] >= to) {\n      break;\n    }\n    sum += Y[i];\n    center += X[i] * Y[i];\n  }\n\n  if (sum < threshold) {\n    return null;\n  }\n\n  center /= sum;\n  if (center - from < 1e-6 || to - center < 1e-6) {\n    return null;\n  }\n  if (center - from < minWindow / 4) {\n    return mainCreateTree(X, Y, center, to, minWindow, threshold);\n  } else {\n    if (to - center < minWindow / 4) {\n      return mainCreateTree(X, Y, from, center, minWindow, threshold);\n    } else {\n      return new Tree(\n        sum,\n        center,\n        mainCreateTree(X, Y, from, center, minWindow, threshold),\n        mainCreateTree(X, Y, center, to, minWindow, threshold)\n      );\n    }\n  }\n}\n\nclass Tree {\n  constructor(sum, center, left, right) {\n    this.sum = sum;\n    this.center = center;\n    this.left = left;\n    this.right = right;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}