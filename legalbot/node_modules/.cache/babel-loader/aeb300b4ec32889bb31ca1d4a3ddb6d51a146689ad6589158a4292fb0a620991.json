{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CollectionNameSchema = exports.MetadataConfigSchema = exports.CapacityModeSchema = exports.CloudSchema = exports.EnvironmentSchema = exports.RegionSchema = exports.DimensionSchema = exports.MetricSchema = exports.ShardsSchema = exports.PodsSchema = exports.ReplicasSchema = exports.PodTypeSchema = exports.IndexNameSchema = void 0;\nvar typebox_1 = require(\"@sinclair/typebox\");\nvar nonemptyString = typebox_1.Type.String({\n  minLength: 1\n});\nvar positiveInteger = typebox_1.Type.Integer({\n  minimum: 1\n});\n// If user passes the empty string for index name, the generated\n// OpenAPI client will call /databases/ which is the list\n// indexes endpoint. This returns 200 instead of 404, but obviously\n// no descriptive information is returned for an index named empty\n// string. To avoid this confusing case, we require lenth > 1.\nexports.IndexNameSchema = nonemptyString;\nexports.PodTypeSchema = nonemptyString;\nexports.ReplicasSchema = positiveInteger;\nexports.PodsSchema = positiveInteger;\nexports.ShardsSchema = positiveInteger;\nexports.MetricSchema = typebox_1.Type.Union([typebox_1.Type.Literal('cosine'), typebox_1.Type.Literal('euclidean'), typebox_1.Type.Literal('dotproduct')]);\nexports.DimensionSchema = positiveInteger;\nexports.RegionSchema = nonemptyString;\nexports.EnvironmentSchema = nonemptyString;\nexports.CloudSchema = typebox_1.Type.Union([typebox_1.Type.Literal('gcp'), typebox_1.Type.Literal('aws'), typebox_1.Type.Literal('azure')]);\nexports.CapacityModeSchema = nonemptyString;\nexports.MetadataConfigSchema = typebox_1.Type.Object({\n  indexed: typebox_1.Type.Array(nonemptyString)\n}, {\n  additionalProperties: false\n});\n// If user passes the empty string for collection name, the generated\n// OpenAPI client will call /collections/ which is the list\n// collection endpoint. This returns 200 instead of 404, but obviously\n// no descriptive information is returned for an collection named empty\n// string. To avoid this confusing case, we require lenth > 1.\nexports.CollectionNameSchema = nonemptyString;","map":{"version":3,"names":["typebox_1","require","nonemptyString","Type","String","minLength","positiveInteger","Integer","minimum","exports","IndexNameSchema","PodTypeSchema","ReplicasSchema","PodsSchema","ShardsSchema","MetricSchema","Union","Literal","DimensionSchema","RegionSchema","EnvironmentSchema","CloudSchema","CapacityModeSchema","MetadataConfigSchema","Object","indexed","Array","additionalProperties","CollectionNameSchema"],"sources":["../../src/control/types.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAEA,IAAMC,cAAc,GAAGF,SAAA,CAAAG,IAAI,CAACC,MAAM,CAAC;EAAEC,SAAS,EAAE;AAAC,CAAE,CAAC;AACpD,IAAMC,eAAe,GAAGN,SAAA,CAAAG,IAAI,CAACI,OAAO,CAAC;EAAEC,OAAO,EAAE;AAAC,CAAE,CAAC;AAEpD;AACA;AACA;AACA;AACA;AACaC,OAAA,CAAAC,eAAe,GAAGR,cAAc;AAEhCO,OAAA,CAAAE,aAAa,GAAGT,cAAc;AAC9BO,OAAA,CAAAG,cAAc,GAAGN,eAAe;AAChCG,OAAA,CAAAI,UAAU,GAAGP,eAAe;AAC5BG,OAAA,CAAAK,YAAY,GAAGR,eAAe;AAC9BG,OAAA,CAAAM,YAAY,GAAGf,SAAA,CAAAG,IAAI,CAACa,KAAK,CAAC,CACrChB,SAAA,CAAAG,IAAI,CAACc,OAAO,CAAC,QAAQ,CAAC,EACtBjB,SAAA,CAAAG,IAAI,CAACc,OAAO,CAAC,WAAW,CAAC,EACzBjB,SAAA,CAAAG,IAAI,CAACc,OAAO,CAAC,YAAY,CAAC,CAC3B,CAAC;AACWR,OAAA,CAAAS,eAAe,GAAGZ,eAAe;AACjCG,OAAA,CAAAU,YAAY,GAAGjB,cAAc;AAC7BO,OAAA,CAAAW,iBAAiB,GAAGlB,cAAc;AAClCO,OAAA,CAAAY,WAAW,GAAGrB,SAAA,CAAAG,IAAI,CAACa,KAAK,CAAC,CACpChB,SAAA,CAAAG,IAAI,CAACc,OAAO,CAAC,KAAK,CAAC,EACnBjB,SAAA,CAAAG,IAAI,CAACc,OAAO,CAAC,KAAK,CAAC,EACnBjB,SAAA,CAAAG,IAAI,CAACc,OAAO,CAAC,OAAO,CAAC,CACtB,CAAC;AACWR,OAAA,CAAAa,kBAAkB,GAAGpB,cAAc;AACnCO,OAAA,CAAAc,oBAAoB,GAAGvB,SAAA,CAAAG,IAAI,CAACqB,MAAM,CAC7C;EACEC,OAAO,EAAEzB,SAAA,CAAAG,IAAI,CAACuB,KAAK,CAACxB,cAAc;CACnC,EACD;EAAEyB,oBAAoB,EAAE;AAAK,CAAE,CAChC;AAED;AACA;AACA;AACA;AACA;AACalB,OAAA,CAAAmB,oBAAoB,GAAG1B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}